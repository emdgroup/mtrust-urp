name: Build and Version

on:
  push:
    branches:
      - dev
      - main

jobs:
  # Commmit checker prevents a loop of commits by GitHub Actions
  commit-check:
    name: Commit Checker
    outputs:
      success: ${{ steps.check.outputs.success }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check last commit
        id: check
        run: |
          LAST_COMMITTER=$(git log -1 --pretty=format:'%an')

          if [[ "$LAST_COMMITTER" == "GitHub Actions" ]]; then
            echo "Last commit was made by GitHub Actions. Exiting..."
            echo "success=false" >> $GITHUB_OUTPUT
          else
            echo "Last commit was made by a user. Executing..."
            echo "success=true" >> $GITHUB_OUTPUT 
          fi

  # Validate the code, run tests and analyze the code, dry run the release
  validate:
    if: needs.commit-check.outputs.success == 'true'
    needs: commit-check
    name: Run analysis and tests
    uses: ./.github/workflows/validate.yaml

  # Run versioning, bump the pubspec.yaml file, update the version in the readme
  version:
    name: Version & Build
    needs: validate
    runs-on: ubuntu-latest
    environment: release
    permissions:
      contents: write

    outputs:
      version: ${{ steps.get_new_version.outputs.result}}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{secrets.ELEVATED_TOKEN}}

      - name: üìá Configure git
        run: |
          git fetch --prune --unshallow
          git config --global user.name "GitHub Actions"
          git config --global user.email "gh-actions@emdgroup.com"
        shell: bash

      - name: üîÇ Run versioning
        uses: ./.github/actions/version
        with:
          dry_run: false

      # Retrieve the new version
      - name: ‚èé Get new version
        uses: actions/github-script@v7
        id: get_new_version
        with:
          result-encoding: string
          script: |
            const fs = require('fs');
            const package = JSON.parse(fs.readFileSync('package.json', 'utf8'));
            return package.version;

      - name: Print new version
        run: echo ${{ steps.get_new_version.outputs.result}}

      # Bump the pubspec.yaml file
      - name: ‚¨ÜÔ∏è Bump pubspec.yaml
        uses: ./.github/actions/update-pubspec
        with:
          version: ${{ steps.get_new_version.outputs.result }}
          directory: .

      - name: üìù Update version in readme
        uses: ./.github/actions/update-pubspec-readme-version
        with:
          directory: .

      - name: Prepare Flutter, Install dependencies
        uses: ./.github/actions/prepare-flutter

      - name: Dry run release
        run: |
          dart run packages.dart set-deps --source=hosted
          dart run packages.dart dry-run-release

      - name: Update changelogs
        run: |
          dart run packages.dart write-changelog

      #  We first commit with proper message and add an empty commit to keep the files history clean
      - name: Update versions in child packages
        run: |
          git add . 
          git commit -m "chore: ${{ steps.get_new_version.outputs.result }}"
          git push origin ${{ github.ref }}

      #  For this part it is important to not push a commit with [skip ci] before the tag release
      - name: Push tag for pub.dev
        run: |
          git commit --allow-empty -m "chore: ${{ steps.get_new_version.outputs.result }}"
          git tag -a v${{ steps.get_new_version.outputs.result }} -m "Pub.dev version ${{ steps.get_new_version.outputs.result }}"
          git push origin v${{ steps.get_new_version.outputs.result }}
          git push origin ${{ github.ref }}

  rebase_dev:
    if: ${{ github.ref == 'refs/heads/main' }}
    name: Write changes to dev branch
    needs: [version]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{secrets.ELEVATED_TOKEN}}

      - name: Setup Git User
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "gh-actions@emdgroup.com"

      - name: Update Test Branch
        run: |
          git checkout main
          git fetch origin
          git checkout dev
          git pull
          git merge origin/main
          git push origin dev
