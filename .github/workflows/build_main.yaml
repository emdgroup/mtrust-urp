name: Main - üöÄ build packages

on:
  push:
    branches:
      - main

jobs:
  version:
    name: Version & Build
    runs-on: ubuntu-latest
    environment: release
    permissions:
      contents: write

    outputs:
      version: ${{ steps.get_new_version.outputs.result}}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{secrets.ELEVATED_TOKEN}}

      - name: üìá Configure git
        run: |
          git fetch --prune --unshallow
          git config --global user.name "GitHub Actions"
          git config --global user.email "gh-actions@merckgroup.com"
        shell: bash

      # Retrieve the new version
      - name: üîÇ Run standard-version
        uses: actions/github-script@v7
        with:
          script: |
            const {execSync} = require('child_process');
            execSync('npx standard-version --skip.tag', {stdio: 'inherit'});

      # Retrieve the new version
      - name: ‚èé Get new version
        uses: actions/github-script@v7
        id: get_new_version
        with:
          result-encoding: string
          script: |
            const fs = require('fs');
            const package = JSON.parse(fs.readFileSync('package.json', 'utf8'));
            return package.version;

      - name: Print new version
        run: echo ${{ steps.get_new_version.outputs.result}}

      # Bump the pubspec.yaml file
      - name: ‚¨ÜÔ∏è Bump pubspec.yaml
        uses: ./.github/actions/update-pubspec
        with:
          version: ${{ steps.get_new_version.outputs.result }}
          directory: .

      - name: üìù Update version in readme
        uses: ./.github/actions/update-pubspec-readme-version
        with:
          directory: .

      - name: Setup Dart
        uses: dart-lang/setup-dart@v1

      #
      # Check mtrust_urp_core as the first package
      #
      - name: Prepare Flutter for mtrust_urp_core
        uses: ./.github/actions/prepare-flutter
        with:
          directory: "./mtrust_urp_core"

      - name: Validate Flutter for mtrust_urp_core
        uses: ./.github/actions/validate-flutter
        with:
          directory: "./mtrust_urp_core"
          is_package: true

      - name: Check licenses for mtrust_urp_core
        uses: ./.github/actions/check-dart-licenses
        with:
          directory: "./mtrust_urp_core"

      #  We first commit with proper message and add an empty commit to keep the files history clean
      - name: Update versions in child packages
        run: |
          dart pub get
          dart run packages.dart set-deps local
          cp CHANGELOG.md ./mtrust_urp_core/CHANGELOG.md
          cp CHANGELOG.md ./mtrust_urp_usb_strategy/CHANGELOG.md
          cp CHANGELOG.md ./mtrust_urp_wifi_strategy/CHANGELOG.md
          cp CHANGELOG.md ./mtrust_urp_ble_strategy/CHANGELOG.md
          cp CHANGELOG.md ./mtrust_urp_virtual_strategy/CHANGELOG.md
          cp CHANGELOG.md ./mtrust_urp_ui/CHANGELOG.md
          git add . 
          git commit -m "chore(release): ${{ steps.get_new_version.outputs.result }}"
          git commit --allow-empty -m "chore(release): ${{ steps.get_new_version.outputs.result }} [skip ci]"
          git push origin main

      #  For this part it is important to not push a commit with [skip ci] before the tag release
      - name: Push tag for pub.dev
        run: |
          git commit --allow-empty -m "chore(release): ${{ steps.get_new_version.outputs.result }}"
          git tag -a v${{ steps.get_new_version.outputs.result }} -m "Pub.dev version ${{ steps.get_new_version.outputs.result }}"
          git push origin v${{ steps.get_new_version.outputs.result }}

  rebase_dev:
    name: Write changes to dev branch
    needs: [version]
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{secrets.ELEVATED_TOKEN}}

      - name: Setup Git User
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "gh-actions@merckgroup.com"

      - name: Update Test Branch
        run: |
          git checkout main
          git fetch origin
          git checkout dev
          git pull
          git merge origin/main
          git push origin dev
