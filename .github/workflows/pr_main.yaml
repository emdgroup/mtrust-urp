on:
  pull_request:
    branches:
      - main
jobs:
  validate_pr:
    permissions:
      pull-requests: write
    uses: VeryGoodOpenSource/very_good_workflows/.github/workflows/semantic_pull_request.yml@v1

  test_version:
    needs: validate_pr
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{secrets.ELEVATED_TOKEN}}

      - name: 📇 Configure git
        run: |
          git fetch --prune --unshallow
          git config --global user.name "GitHub Actions"
          git config --global user.email "gh-actions@emdgroup.com"
        shell: bash

      - name: Check for potentialy major commits
        run: |
          git log --oneline --grep="BREAKING CHANGE" --grep="!" --pretty=format:"%h %s"

      # Retrieve the new version
      - name: 🔂 Run standard-version
        uses: actions/github-script@v7
        with:
          script: |
            const {execSync} = require('child_process');
            execSync('npx standard-version --dry-run', {stdio: 'inherit'});

      # Retrieve the new version
      - name: ⏎ Get new version
        uses: actions/github-script@v7
        id: get_new_version
        with:
          result-encoding: string
          script: |
            const fs = require('fs');
            const package = JSON.parse(fs.readFileSync('package.json', 'utf8'));
            return package.version;

      - name: Print new version
        run: echo ${{ steps.get_new_version.outputs.result}}

  build_and_version_osx:
    name: Validate ${{ matrix.package }}
    runs-on: macos-latest
    needs: test_version
    strategy:
      matrix:
        package: ["mtrust_urp_ui"]
      fail-fast: false

    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      # Prepare all packages
      - name: 🎯 Prepare Flutter
        uses: ./.github/actions/prepare-flutter
        with:
          directory: ./${{ matrix.package }}

      - name: 📍 Set Local Deps
        run: |
          dart pub get
          dart run packages.dart set-deps --source=local

      - name: 🔗 Get dependencies
        run: |
          cd ./${{ matrix.package }}
          dart pub get

      # check licenses
      - uses: ./.github/actions/check-dart-licenses
        with:
          directory: ./${{ matrix.package }}

      # Validate dart
      - uses: ./.github/actions/validate-flutter
        with:
          directory: ./${{ matrix.package }}
          analyze_flags: "--no-fatal-warnings"

  build_and_version_ubuntu:
    name: Validate ${{ matrix.package }}
    runs-on: ubuntu-latest
    needs: test_version
    strategy:
      matrix:
        package: [
            "mtrust_urp_core",
            #"mtrust_urp_usb_strategy",
            #"mtrust_urp_wifi_strategy",
            "mtrust_urp_ble_strategy",
            "mtrust_urp_virtual_strategy",
          ]
      fail-fast: false

    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      # Prepare all packages
      - name: 🎯 Prepare Flutter
        uses: ./.github/actions/prepare-flutter
        with:
          directory: ./${{ matrix.package }}

      - name: 📍 Set Local Deps
        run: |
          dart pub get
          dart run packages.dart set-deps --source=local

      - name: 🔗 Get dependencies
        run: |
          cd ./${{ matrix.package }}
          dart pub get

      # check licenses
      - uses: ./.github/actions/check-dart-licenses
        with:
          directory: ./${{ matrix.package }}

      # Validate dart
      - uses: ./.github/actions/validate-flutter
        with:
          directory: ./${{ matrix.package }}
          analyze_flags: "--no-fatal-warnings"
